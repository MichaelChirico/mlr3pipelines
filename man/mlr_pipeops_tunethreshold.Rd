% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTuneThreshold.R
\name{mlr_pipeops_tunethreshold}
\alias{mlr_pipeops_tunethreshold}
\alias{PipeOpTuneThreshold}
\title{PipeOpTuneThreshold}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.}
\description{
Tunes optimal probability thresholds over different \code{\link{PredictionClassif}}s.
Learner's \code{predict_type} \code{"prob"} is required.
Thresholds for each learner are optimized using (GenSA)\link[GenSA:GenSA]{GenSA::GenSA}.
Returns a single \code{\link{PredictionClassif}}.
As a default, optimizes the miss-classification error \code{\link{MeasureClassif}}.
This PipeOp should be used in conjunction with \code{\link{PipeOpLearnerCV}} in order to
optimize thresholds of predictions.
}
\section{Construction}{
\preformatted{* `PipeOpTuneThreshold$new(id, param_vals = list)` \\cr
  (`character(1)`, `list`) -> `self` \\cr
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings
that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpPredPostproc}}.
}

\section{State}{

The \verb{$state} is a named \code{list} with elements
\itemize{
\item \code{thresholds} :: \code{character} learned thresholds
}
}

\section{Parameters}{

\itemize{
\item \code{measure} :: \code{\link{Measure}}\cr
\code{\link{Measure}} to optimize.
Defaults to \code{msr("classif.ce")}, i.e. misclassification error.
\item \code{optimizer} :: \code{\link{Optimizer}}\cr
\code{\link{Optimizer}} used to find optimal thresholds.
Defaults to \code{OptimizerGenSA$new()}
}
}

\section{Internals}{

Uses the provided optimizer in order to
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpPredPostproc}}.
}

\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpPredPostproc}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
