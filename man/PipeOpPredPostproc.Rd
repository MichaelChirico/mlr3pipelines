% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpPredPostproc.R
\name{PipeOpPredPostproc}
\alias{PipeOpPredPostproc}
\title{PipeOpPredPostproc}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.}
\description{
Abstract base class for handling most 'postprocessing' operations on predictions.
These are operations that have exactly one prediction object as input and one
prediction object as output.

Users must implement \verb{$train()} and \verb{$predict()}, which have a \code{\link{Prediction}}
input and should return that \code{Prediction}. The \code{Prediction} should, if possible, be
manipulated in-place, and should not be cloned.
}
\section{Construction}{
\preformatted{* `PipeOpPredPostproc$new(id, param_set = ParamSet$new())` \\cr
  (`character(1)`, `ParamSet`, `logical(1)`) -> `self` \\cr
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object.
\item \code{param_set} :: \code{\link[paradox:ParamSet]{ParamSet}} | \code{list} of \code{expression}\cr
Parameter space description. This should be created by the subclass and given to \code{super$initialize()}.
If this is a \code{\link[paradox:ParamSet]{ParamSet}}, it is used as the \code{\link{PipeOp}}'s \code{\link[paradox:ParamSet]{ParamSet}}
directly. Otherwise it must be a \code{list} of expressions e.g. created by \code{alist()} that evaluate to \code{\link[paradox:ParamSet]{ParamSet}}s.
These \code{\link[paradox:ParamSet]{ParamSet}} are combined using a \code{\link[paradox:ParamSetCollection]{ParamSetCollection}}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Inputs are of type \code{\link{Task}} during train and predict.
Outputs are \code{NULL} during train and \code{\link{Prediction}} during predict.
}

\section{State}{

The \verb{$state} is a named \code{list} with elements
\itemize{
\item \code{thresholds} :: \code{character} learned thresholds
}
}

\section{Parameters}{

Parameters inherited by \code{\link{PipeOp}}
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
