% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpTaskPreproc.R
\docType{data}
\name{PipeOpTaskPreprocSimple}
\alias{PipeOpTaskPreprocSimple}
\title{PipeOpTaskPreprocSimple}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOpTaskPreproc}}.}
\usage{
PipeOpTaskPreprocSimple
}
\description{
Base class for handling many "preprocessing" operations that
that perform essentially the same operation during training and prediction.
Instead implementing a train_task and a predict_task operation, only
a \code{get_state()} and a \code{transform()} operation needs to be defined,
both of which take one argument: a Task.

\code{get_state} must not change its input value in-place and must return
something that will be written into \code{$state}
(which must not be NULL), \code{transform()} must modify its argument in-state;
it is called both during training and prediction.

This inherits from \code{\link{PipeOpTaskPreproc}} and behaves essentially the same.
}
\section{Methods}{

\itemize{
\item \code{get_state(task)} \cr
(\code{\link{Task}}) -> \code{any} \cr
Store create something that will be stored in \code{$state} during training phase of \code{PipeOpTaskPreprocSimple}.
The state can then influence the \code{$transform()} function. Note that \code{$get_state()} must \emph{return} the state, and
should not store it in \code{$state}. If neither \code{$get_state()} nor \code{$get_state_dt()} are overloaded, the state will
be stored as \code{list()}. \cr
This method can optionally be overloaded when inheriting from \code{PipeOpTaskPreprocSimple}, together with \code{$transform()};
alternatively, \code{$get_state_dt()} (optional) and \code{$transform_dt()} (and possibly \code{$select_cols()}, from \code{\link{PipeOpTaskPreproc}})
can be overloaded.
\item \code{transform(task)} \cr
(\code{\link{Task}}) -> \code{\link{Task}} \cr
Predict on new data in \code{task}, possibly using the stored \code{$state}. \code{task} should not be cloned, instead it should be
changed in-place. This method is called both during training and prediction phase, and should essentially behave the
same independently of phase. (If this is incongruent with the design of the \code{PipeOp}, then it should inherit from
\code{PipeOpTaskPreproc}, not from \code{PipeOpTaskPreprocSimple}.) \cr
This method can be overloaded when inheriting from \code{PipeOpTaskPreprocSimple}, optionally with \code{$get_state()};
alternatively, \code{$get_state_dt()} (optional) and \code{$transform_dt()} (and possibly \code{$select_cols()}, from \code{\link{PipeOpTaskPreproc}})
can be overloaded.
\item \code{get_state_dt(dt)} \cr
Store create something that will be stored in \code{$state} during training phase of \code{PipeOpTaskPreprocSimple}.
The state can then influence the \code{$transform_dt()} function. Note that \code{$get_state_dt()} must \emph{return} the state, and
should not store it in \code{$state}. If neither \code{$get_state()} nor \code{$get_state_dt()} are overloaded, the state will
be stored as \code{list()}. \cr
This method can optionally be overloaded when inheriting from \code{PipeOpTaskPreprocSimple}, together with \code{$transform_dt()}
(and optionally \code{$select_cols()}, from \code{\link{PipeOpTaskPreproc}}); Alternatively, \code{$get_state()} (optional) and \code{$transform()}
can be overloaded.
\item \code{transform_dt(dt)} \cr
(\code{\link{data.table}}) -> \code{any} \cr
Predict on new data in \code{dt}, possibly using the stored \code{$state}.  A transformed object must be returned
that can be converted to a \code{data.table} using \code{\link{as.data.table}}. \code{dt} does not need to be copied deliberately, it
is possible and encouraged to change it in-place. This method is called both during training and prediction phase,
and should essentially behave the same independently of phase. (If this is incongruent with the design of the
\code{PipeOp}, then it should inherit from \code{PipeOpTaskPreproc}, not from \code{PipeOpTaskPreprocSimple}.) \cr
This method can optionally be overloaded when inheriting from \code{PipeOpTaskPreprocSimple}, together with \code{$transform_dt()}
(and optionally \code{$select_cols()}, from \code{\link{PipeOpTaskPreproc}}); Alternatively, \code{$get_state()} (optional) and \code{$transform()}
can be overloaded.
}
}

\seealso{
Other mlr3pipelines backend related: \code{\link{Graph}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOp}
\concept{mlr3pipelines backend related}
\keyword{datasets}
