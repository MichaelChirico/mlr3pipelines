% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpDateFeatures.R
\name{mlr_pipeops_datefeaturs}
\alias{mlr_pipeops_datefeaturs}
\alias{PipeOpDateFeatures}
\title{PipeOpDateFeatures}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOp}}.}
\description{
Based on a specified \code{POSIXct} column of the data, a set of date related features is computed and
added to the feature set of the output task. If no \code{POSIXct} column is specified, the first
\code{POSIXct} column found in the data is used. If none is found, the original task is returned
unaltered. This functionality is based on the \code{add_datepart()} and \code{add_cyclic_datepart()}
functions from the \code{fastai} library.
}
\section{Construction}{
\preformatted{PipeOpDateFeatures$new(id = "datefeatures", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"datefeatures"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreprocSimple}}.

The output is the input \code{\link[mlr3:Task]{Task}} with date-related features computed and added to the
feature set of the output task and the specified \code{POSIXct} column of the data removed from the
feature set (depending on the value of \code{keep_date_var}).
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from
\code{\link{PipeOpTaskPreprocSimple}}, as well as:
\itemize{
\item \code{date_var} the name of the \code{POSIXct} column that was used for the feature engineering.
\item \code{keep_date_var} logical value indicating whether the \code{date_var} column of the data should be
removed from the feature set.
\item \code{cyclic} logical value indicating whether cyclic features should be computed.
\item \code{features} vector of computed feature names.
}
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreprocSimple}}, as well as:
\itemize{
\item \code{date_var} :: \code{character(1)}\cr
The name of the \code{POSIXct} column of the data that should be used for the feature engineering.
If not specified, the first \code{POSIXct} column found in the data wll be used.
\item \code{keep_date_var} :: \code{logical(1)}\cr
Whether the \code{date_var} column should be kept as a feature. Default FALSE.
\item \code{cyclic} :: \code{logical(1)}\cr
Whether cyclic features should be computed. See Internals. Default FALSE.
\item \code{year} :: \code{logical(1)}\cr
Whether the year should be extracted as a feature. Default TRUE.
\item \code{month} :: \code{logical(1)}\cr
Whether the month should be extracted as a feature. Default TRUE.
\item \code{week_of_year} :: \code{logical(1)}\cr
Whether the week of the year should be extracted as a feature. Default TRUE.
\item \code{day_of_year} :: \code{logical(1)}\cr
Whether the day of the year should be extracted as a feature. Default TRUE.
\item \code{day_of_month} :: \code{logical(1)}\cr
Whether the day of the month should be extracted as a feature. Default TRUE.
\item \code{day_of_week} :: \code{logical(1)}\cr
Whether the day of the week should be extracted as a feature. Default TRUE.
\item \code{hour} :: \code{logical(1)}\cr
Whether the hour should be extracted as a feature. Default TRUE.
\item \code{minute} :: \code{logical(1)}\cr
Whether the minute should be extracted as a feature. Default TRUE.
\item \code{second} :: \code{logical(1)}\cr
Whether the second should be extracted as a feature. Default TRUE.
\item \code{is_day} :: \code{logical(1)}\cr
Whether a feature should be extracted indicating whether it is day time (06:00 am - 08:00pm).
Default TRUE.
}
}

\section{Internals}{

If \code{cyclic = TRUE}, cyclic features are computed for the features \code{"month"}, \code{"week_of_year"},
\code{"day_of_year"}, \code{"day_of_month"}, \code{"day_of_week"}, \code{"hour"}, \code{"minute"} and \code{"second"}. This
means that for each feature, \code{x}, two additional features are computed, namely the sinus and
cosinus transformation of \code{2 * pi * x / max(x)}. This is useful to respect the cyclical nature of
features such as seconds, i.e., second 21 and second 22 are one second apart, but so are second
60 and second 01. The transformation always assumes that \code{min(x) = 0}, therefore prior shifting
the values internally by minus one may occurr if necessary.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOp}}.
}

\examples{
library("mlr3")
dat = iris
set.seed(1)
dat$date = sample(seq(as.POSIXct("2020-02-01"), to = as.POSIXct("2020-02-29"), by = "hour"),
  size = 150L)
task = TaskClassif$new("iris_date", backend = dat, target = "Species")
pop = po("datefeatures", param_vals = list(date_var = "date", cyclic = FALSE, minute = FALSE,
  second = FALSE))
pop$train(list(task))
pop$state
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
