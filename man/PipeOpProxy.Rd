% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpProxy.R
\name{PipeOpProxy}
\alias{PipeOpProxy}
\title{PipeOpProxy}
\format{Abstract \code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.}
\description{
Behaves like another \code{\link{PipeOp}} or \code{\link{Graph}} that is encapsulated as a \code{content} hyperparameter.
Input is routed through the \code{content} and the \code{content}s' output is returned. Note that the
\code{content} hyperparameter can be changed, this is useful as an alternative to branching.
}
\section{Construction}{
\preformatted{PipeOpProxy$new(id, param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object. See \verb{$id} slot of \code{\link{PipeOp}}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpProxy}} has one input channel named \code{"input"}, taking any input (\code{"*"}) both during
training and prediction.

\code{\link{PipeOpProxy}} has one output channel named \code{"output"} and the output is determined by the
output of the \code{content} \code{\link{PipeOp}} or \code{\link{Graph}}.
}

\section{State}{

The \verb{$state} is the \code{content} \code{\link{PipeOp}} or \code{\link{Graph}}.
}

\section{Parameters}{

\itemize{
\item \code{content} :: \code{\link{PipeOp}} or \code{\link{Graph}} \cr
The \code{\link{PipeOp}} or \code{\link{Graph}} that is being proxied (more precisely an object that can be
converted to a \code{\link{Graph}} with a single output). Defaults to \code{\link{PipeOpNOP}} (simply pushes the
input forward).
}
}

\section{Internals}{

\code{\link{PipeOpProxy}} inherits from \code{\link{PipeOp}}.
}

\section{Fields}{

Fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\examples{
library("mlr3")

task1 = tsk("iris")
task2 = task1$clone(deep = TRUE)

pop = po("pca", param_vals = list(scale. = TRUE))
pop$train(list(task1))
pop$state

proxy = po("proxy", param_vals = list(content = po("pca", param_vals = list(scale. = TRUE))))
proxy$train(list(task2))
proxy$state$state
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputenewlvl}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
